package com.dronegcs.console_plugin.services.internal;

import com.dronedb.persistence.scheme.mission.Mission;
import com.dronedb.persistence.scheme.mission.MissionItem;
import com.dronegcs.console_plugin.mission_editor.MissionsManager;
import com.dronegcs.console_plugin.services.MissionCompilerSvc;
import com.dronegcs.console_plugin.services.internal.convertors.DatabaseToMavlinkItemConvertor;
import com.dronegcs.console_plugin.services.internal.convertors.MavlinkItemToDatabaseConvertor;
import com.dronegcs.mavlink.is.drone.Drone;
import com.dronegcs.mavlink.is.drone.mission.DroneMission;
import com.dronegcs.mavlink.is.drone.mission.DroneMissionItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import javax.validation.constraints.NotNull;
import java.util.Iterator;
import java.util.List;

/**
 * Created by taljmars on 3/18/17.
 */
@Component
public class MissionCompilerSvcImpl implements MissionCompilerSvc
{
    @Autowired @NotNull(message = "Internal Error: Failed to get drone")
    private Drone drone;

    @Autowired @NotNull(message = "Internal Error: Failed to get mission manager")
    private MissionsManager missionsManager;

    @PostConstruct
    private void init() {
        System.err.println("Mission Compiler started");
    }

    @Override
    public DroneMission compile(Mission mission) {

        DroneMission droneMission = new DroneMission();
        droneMission.setDrone(drone);

        droneMission.setDefaultAlt(mission.getDefaultAlt());

        DatabaseToMavlinkItemConvertor databaseToMavlinkItemConvertor = new DatabaseToMavlinkItemConvertor();
        databaseToMavlinkItemConvertor.setDroneMission(droneMission);

        Iterator<MissionItem> itr = missionsManager.getMissionItems(mission).iterator();
        while (itr.hasNext())
            itr.next().accept(databaseToMavlinkItemConvertor);

        return databaseToMavlinkItemConvertor.getDroneMission();
    }

    @Override
    public Mission decompile(DroneMission droneMission) {
        Mission mission = new Mission();
        mission.setDefaultAlt(droneMission.getDefaultAlt());
        mission.setName("AutoGenerated_Name_" + System.currentTimeMillis());
        List<DroneMissionItem> droneMissionItemList = droneMission.getItems();

        MavlinkItemToDatabaseConvertor mavlinkItemToDatabaseConvertor = new MavlinkItemToDatabaseConvertor();
        mavlinkItemToDatabaseConvertor.setMission(mission);

        Iterator<DroneMissionItem> itr = droneMissionItemList.iterator();
        while (itr.hasNext()) {
            DroneMissionItem droneMissionItem = itr.next();
            droneMissionItem.accept(mavlinkItemToDatabaseConvertor);
        }

        return mavlinkItemToDatabaseConvertor.getMission();
    }
}
