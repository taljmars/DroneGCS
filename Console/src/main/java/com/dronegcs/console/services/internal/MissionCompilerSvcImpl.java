package com.dronegcs.console.services.internal;

import com.dronedb.persistence.scheme.Mission;
import com.dronedb.persistence.scheme.MissionItem;
import com.dronedb.persistence.scheme.Waypoint;
import com.dronegcs.console.services.MissionCompilerSvc;
import com.dronegcs.mavlink.is.drone.mission.DroneMission;
import com.dronegcs.mavlink.is.drone.mission.DroneMissionItem;
import com.dronegcs.mavlink.is.drone.mission.MissionItemType;
import com.dronegcs.mavlink.is.drone.mission.waypoints.DroneWaypoint;
import com.geo_tools.Coordinate;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * Created by taljmars on 3/18/17.
 */
public class MissionCompilerSvcImpl implements MissionCompilerSvc
{
    @Override
    public DroneMission compile(Mission mission) {
        DroneMission droneMission = new DroneMission();
        droneMission.setDefaultAlt(mission.getDefaultAlt());

        Iterator<MissionItem> itr = mission.getMissionItems().iterator();
        while (itr.hasNext()) {
            MissionItem missionItem = itr.next();
            switch (missionItem.getType()) {
                case WAYPOINT:
                    Waypoint waypoint = (Waypoint) missionItem;
                    DroneWaypoint droneWaypoint = new DroneWaypoint(droneMission, new Coordinate(waypoint.getLat(), waypoint.getLon()));
                    droneWaypoint.setYawAngle(waypoint.getYawAngle());
                    droneWaypoint.setOrbitCCW(waypoint.isOrbitCCW());
                    droneWaypoint.setOrbitalRadius(waypoint.getOrbitalRadius());
                    droneWaypoint.setAcceptanceRadius(waypoint.getAcceptanceRadius());
                    droneWaypoint.setDelay(waypoint.getDelay());
                    droneWaypoint.setAltitude(waypoint.getAltitude());

                    droneMission.addMissionItem(droneWaypoint);
                default:
                    System.out.println("Unrecognized type ");
            }
        }

        return droneMission;
    }

    @Override
    public Mission decompile(DroneMission droneMission) {
        Mission mission = new Mission();
        mission.setDefaultAlt(droneMission.getDefaultAlt());
        mission.setName("AutoGenerated_Name_" + System.currentTimeMillis());
        List<DroneMissionItem> droneMissionItemList = droneMission.getItems();
        List<MissionItem> missionItemList = new ArrayList<>();

        Iterator<DroneMissionItem> itr = droneMissionItemList.iterator();
        while (itr.hasNext()) {
            DroneMissionItem droneMissionItem = itr.next();
            MissionItemType type = droneMissionItem.getType();
            switch (type) {
                case WAYPOINT:
                    Waypoint waypoint = new Waypoint();
                    DroneWaypoint droneDroneWaypoint = (DroneWaypoint) droneMissionItem;
                    waypoint.setDelay(droneDroneWaypoint.getDelay());
                    waypoint.setAcceptanceRadius(droneDroneWaypoint.getAcceptanceRadius());
                    waypoint.setOrbitalRadius(droneDroneWaypoint.getOrbitalRadius());
                    waypoint.setOrbitCCW(waypoint.isOrbitCCW());
                    waypoint.setYawAngle(droneDroneWaypoint.getYawAngle());
                    waypoint.setLat(droneDroneWaypoint.getCoordinate().getLat());
                    waypoint.setLon(droneDroneWaypoint.getCoordinate().getLon());
                    waypoint.setAltitude(droneDroneWaypoint.getAltitude());
                    missionItemList.add(waypoint);
                    break;
                default:
                    System.out.println("Unrecognized type " + type);
            }
        }

        mission.setMissionItems(missionItemList);
        return mission;
    }
}
